function init(self)
	msg.post(".", "acquire_input_focus")
	self.walk_speed = 150
	self.direction = vmath.vector3()
	self.velocity = vmath.vector3(self.walk_speed, 0, 0)
	self.gravity_accel = 4
	self.vertical_accel = 0
	self.max_vertical_accel = 10
	self.jump_takeoff_speed = 400

	self.player_states = {}

	self.player_states.walking = "walk"
	self.player_states.idle = "idle"
	self.player_states.jumping = "jump"
	self.player_states.falling = "fall"

	self.looking_left = false

	self.current_state = self.player_states.idle

	self.animation_running = false

	self.correction = vmath.vector3()
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

local function set_player_state(self, player_state)
	self.current_state = player_state
	self.animation_running = false
end

function update(self, dt)

	print('player state=', self.current_state)

	if self.direction.x == 0 and self.velocity.y == 0 then
		set_player_state(self, self.player_states.idle)
	end

	if self.velocity.y > 0 then
		set_player_state(self, self.player_states.jumping)
	elseif self.velocity.y < 0 then
		set_player_state(self, self.player_states.falling)
	end

	sprite.set_hflip('#player_sprite', self.looking_left)
	if self.animation_running == false then
		sprite.play_flipbook('#player_sprite', hash(self.current_state))
		self.animation_running = true
	end

	self.vertical_accel = self.vertical_accel + self.gravity_accel
	if self.vertical_accel >= self.max_vertical_accel then
		self.vertical_accel = self.max_vertical_accel
	end

	self.velocity.y = self.velocity.y - self.vertical_accel

	local position = go.get_position()
	position.x = position.x + self.direction.x * self.velocity.x * dt
	position.y = position.y + self.velocity.y * dt
	go.set_position(position)
	self.direction = vmath.vector3()

	self.correction = vmath.vector3()

	self.velocity.x = self.walk_speed

end

local function handle_collision(self, distance, normal)
	if distance > 0 then
		local proj = vmath.dot(self.correction, normal)
		local comp = (distance - proj) * normal
		local newpos = go.get_position() + comp
		self.correction = self.correction + comp
		go.set_position(newpos)

		proj = vmath.dot(self.velocity, normal)

		if proj < 0 then
			self.velocity = self.velocity - proj * normal
		end
	end
end

function on_message(self, message_id, message, sender)

	if message_id ==hash('animation_done') then
		self.animation_running = false
	end

	if message_id == hash("contact_point_response") then
		handle_collision(self, message.distance, message.normal)
	end
end

function on_input(self, action_id, action)
	
	if action_id == hash('move_left') then		
		self.direction.x = -1
		if action.pressed then
			self.looking_left = true
			set_player_state(self, self.player_states.walking)
		end

	elseif action_id == hash('move_right') then
		self.direction.x = 1
		if action.pressed then
			self.looking_left = false
			set_player_state(self, self.player_states.walking)
		end

	elseif action_id == hash('jump') then
		if action.pressed then
			if ( self.current_state ~= self.player_states.jumping and self.current_state ~= self.player_states.falling ) then
				self.velocity.y = self.jump_takeoff_speed
			end
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
		-- Remove this function if not needed
end
;